@page "/users"

@using SharedLib.DTOs;

@attribute [Authorize(Roles = "Admin")]

@inject Radzen.DialogService dialogService
@inject HttpClient httpClient

<PageTitle>Usuarios</PageTitle>

<RadzenStack>
    <div class="rz-display-flex rz-align-items-center"
        style="position: relative; width: 100%; height: 3rem; padding-right: 2rem;">
        <!-- Botón alineado a la derecha -->
        <RadzenButton Click=@(() => OnAddClick()) Text="Crear usuario" Icon="add_circle"
            ButtonStyle="ButtonStyle.Primary" style="margin-left: auto;" />

        <!-- Título centrado absolutamente -->
        <div style="position: absolute; left: 50%; transform: translateX(-50%);">
            <RadzenText TextStyle="TextStyle.H4">Usuarios</RadzenText>
        </div>
    </div>

    <div class="rz-display-flex rz-justify-content-center rz-align-items-center">
        <RadzenCard class="rz-shadow-6" Style="width: 100%; margin: 1rem;">
            <RadzenDataGrid @ref="usersGrid" AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true" PageSize="5" AllowSorting="false" Data="@users" TItem="UserDetailDto">
                <Columns>
                    <RadzenDataGridColumn Width="50px" Title="ID" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @(users.IndexOf(data) + 1)
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Usuario" Property="UserDetailDto.UserName">
                        <Template Context="user">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"> @user.UserName
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Email" Property="UserDetailDto.Email">
                        <Template Context="user">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"> @user.Email
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Rol" Property="UserDetailDto.Role">
                        <Template Context="user">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"> @user.Role
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Opciones">
                        <Template Context="user">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10">
                                    <RadzenButton Click=@(() => OnEditClick()) Icon="open_in_new"
                                        ButtonStyle="ButtonStyle.Base" style="margin-left: auto;" />
                                        <RadzenButton Click=@(() => OnDeleteClick()) Icon="delete"
                                        ButtonStyle="ButtonStyle.Danger" style="margin-left: auto;" />
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    </div>
</RadzenStack>

@code {

    public required RadzenDataGrid<UserDetailDto> usersGrid;
    public required IList<UserDetailDto> users;

    async Task OpenCreateUserDialog()
    {
        await dialogService.OpenAsync<CreateUserDialogPage>($"Crear nuevo usuario",
        null,
        new DialogOptions() { Width = "700px", Height = "520px" });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        users = await UpdateTable();
    }

    private async Task OnAddClick()
    {
        var parameters = new Dictionary<string, object>
            {
                { "OnUserCreated", EventCallback.Factory.Create(this, RefreshUsers) }
            };
        await dialogService.OpenAsync<CreateUserDialogPage>(
            "Crear Nuevo Usuario",
            parameters,
            new DialogOptions() { Width = "900px", Height = "700px" });
    }

    private async Task OnEditClick()
    {

    }

    private async Task OnDeleteClick()
    {

    }

    private async Task RefreshUsers()
    {
        users = await UpdateTable();
        await usersGrid.Reload();
        StateHasChanged();
    }

    protected async Task<IList<UserDetailDto>> UpdateTable()
    {
        try
        {
            var response = await httpClient.GetAsync("Users");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IList<UserDetailDto>>();
                return result ?? new List<UserDetailDto>();
            }
            else
            {
                return new List<UserDetailDto>();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return new List<UserDetailDto>();
        }
    }

}