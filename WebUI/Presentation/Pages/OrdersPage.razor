@page "/orders"

@attribute [Authorize(Roles = "Admin, Regular")]

@using SharedLib.DTOs

@inject Radzen.DialogService dialogService
@inject HttpClient httpClient
@inject NavigationManager navManager

<PageTitle>Pedidos</PageTitle>

<RadzenStack>
    <div class="rz-display-flex rz-align-items-center"
        style="position: relative; width: 100%; height: 3rem; padding-right: 2rem;">
        <RadzenButton Click=@(() => OnAddClick()) Text="Crear pedido" Icon="add_circle"
            ButtonStyle="ButtonStyle.Primary" style="margin-left: auto;" />

        <div style="position: absolute; left: 50%; transform: translateX(-50%);">
            <RadzenText TextStyle="TextStyle.H4">Pedidos</RadzenText>
        </div>
    </div>

    <div class="rz-display-flex rz-justify-content-center rz-align-items-center">
        <RadzenCard class="rz-shadow-6" Style="width: 100%; margin: 1rem;">
            <RadzenDataGrid @ref="ordersGrid" AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true" PageSize="5" AllowSorting="false" Data="@orders" TItem="OrderDetailDto">
                <Columns>
                    <RadzenDataGridColumn Width="50px" Title="ID" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @(orders.IndexOf(data) + 1)
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Fecha" Property="OrderDetailDto.OrderDate">
                        <Template Context="order">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"> @order.OrderDate
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Cliente" Property="OrderDetailDto.OrderDate">
                        <Template Context="order">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"> @order.ClientName
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Opciones">
                        <Template Context="order">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem"
                                AlignItems="AlignItems.Center">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10">
                                    <RadzenButton Click=@(() => OnEditClick(order)) Icon="open_in_new"
                                        ButtonStyle="ButtonStyle.Base" style="margin-left: auto;" />
                                        <RadzenButton Click=@(() => OnDeleteClick()) Icon="delete"
                                        ButtonStyle="ButtonStyle.Danger" style="margin-left: auto;" />
                                </RadzenStack>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    </div>

</RadzenStack>


@code {

    public required RadzenDataGrid<OrderDetailDto> ordersGrid;
    public required IList<OrderDetailDto> orders;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        orders = await UpdateTable();
    }

    protected async Task<IList<OrderDetailDto>> UpdateTable()
    {
        try
        {
            var response = await httpClient.GetAsync("Orders");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IList<OrderDetailDto>>();
                return result ?? new List<OrderDetailDto>();
            }
            else
            {
                return new List<OrderDetailDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return new List<OrderDetailDto>();
        }
    }

    private async Task RefreshOrders()
    {
        orders = await UpdateTable();
        await ordersGrid.Reload();
        StateHasChanged();
    }

    private async Task OnAddClick()
    {
        var parameters = new Dictionary<string, object>
            {
                { "OnOrderCreated", EventCallback.Factory.Create(this, RefreshOrders) }
            };
        await dialogService.OpenAsync<CreateOrderDialogPage>(
            "Crear Nueva Orden",
            parameters,
            new DialogOptions() { Width = "900px", Height = "700px" });
    }

    private async Task OnEditClick(OrderDetailDto order)
    {
        navManager.NavigateTo($"/order/details/{order.OrderId}");
    }

    private async Task OnDeleteClick()
    {
        //Coming soon
    }



}
